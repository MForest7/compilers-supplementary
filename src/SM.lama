-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of
    stmt:tail -> eval(case stmt of
      READ -> case readWorld (world) of
        [n, newWorld] -> [n:stack, state, newWorld]
      esac
    | WRITE -> case stack of
        n:bottom -> [bottom, state, writeWorld(n, world)]
      esac
    | BINOP (op) -> case stack of
        y:x:bottom -> [evalExpr(emptyState, Binop (op, Const(x), Const(y))):bottom, state, world]
      esac
    | LD (v) -> [state(v):stack, state, world]
    | ST (v) -> case stack of
        x:bottom -> [bottom, state <- [v, x], world]
      esac
    | CONST (x) -> [x:stack, state, world]
    esac, tail)
  | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> {LD (v)}
  | Const (x) -> {CONST (x)}
  | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (v, e) -> compileExpr(e) +++ {ST (v)}
  | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
  | Skip -> {}
  | Read (v) -> {READ} +++ {ST (v)}
  | Write (e) -> compileExpr(e) +++ {WRITE}
  esac
}

-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns | None -> failure(l) esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
    stmt:tail -> 
    --fprintf(stderr, "> %s\n", showSMInsn (stmt));
    case stmt of
      READ -> case readWorld (world) of
        [n, newWorld] -> eval(env, [n:stack, state, newWorld], tail)
      esac
    | WRITE -> case stack of
        n:bottom -> eval(env, [bottom, state, writeWorld(n, world)], tail)
      esac
    | BINOP (op) -> case stack of
        y:x:bottom -> eval(env, [evalExpr(emptyState, Binop (op, Const(x), Const(y))):bottom, state, world], tail)
      esac
    | LD (v) -> eval(env, [state(v):stack, state, world], tail)
    | ST (v) -> case stack of
        x:bottom -> eval(env, [bottom, state <- [v, x], world], tail)
      esac
    | CONST (x) -> eval (env, [x:stack, state, world], tail)
    | LABEL (l) -> eval (env, c, tail)
    | JMP (l) -> eval (env, c, fromLabel (env, l))
    | CJMP (pred, l) -> case pred of
        "Z" -> case stack of 
            n:bottom -> eval (env, [bottom, state, world], if n == 0 then fromLabel (env, l) else tail fi)
          esac
      | "NZ" -> case stack of 
          n:bottom -> eval (env, [bottom, state, world], if n != 0 then fromLabel (env, l) else tail fi)
        esac
      esac
    | x -> fprintf("fail: %s", x)
    esac
  | _ -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a buffer of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> singletonBuffer (LD (v))
  | Const (x) -> singletonBuffer (CONST (x))
  | Binop (op, l, r) -> compileExpr(l) <+> compileExpr(r) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, trueBranch, falseBranch) ->
        case env.genLabels(2) of [trueEnd, falseBegin, env] -> 
            case compile (trueEnd, env, trueBranch) of [trueEndUsed, env, trueBranchCode] -> 
                case compile (lab, env, falseBranch) of [falseBeginUsed, env, falseBranchCode] ->
                  [true, env, emptyBuffer ()
                    <+> compileExpr (cond)
                    <+ CJMP ("Z", falseBegin)
                    <+> trueBranchCode
                    <+> label (trueEnd, trueEndUsed)
                    <+ JMP (lab)
                    <+ LABEL (falseBegin)
                    <+> falseBranchCode
                  ]
                esac
            esac
        esac
    | While (cond, body) ->
        case env.genLabels(2) of [whileBegin, bodyEnd, env] ->
            case compile (bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
              [true, env, emptyBuffer ()
                <+ LABEL (whileBegin)
                <+> compileExpr (cond)
                <+ CJMP ("Z", lab)
                <+> bodyCode
                <+> label (bodyEnd, bodyEndUsed)
                <+ JMP (whileBegin)
              ]
            esac
        esac
    | DoWhile (cond, body) ->
        case env.genLabels(2) of [whileBegin, bodyEnd, env] ->
            case compile (bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
              [false, env, emptyBuffer ()
                <+ LABEL (whileBegin)
                <+> bodyCode
                <+> label (bodyEnd, bodyEndUsed)
                <+> compileExpr (cond)
                <+ CJMP ("NZ", whileBegin)
              ]
            esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}

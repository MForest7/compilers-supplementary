-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal(state, nArgs, nLocals) {
    case take (state, nArgs) of [tail, head] -> [tail, [listArray(head), initArray (nLocals, fun (_) {0})]] esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, callStack, state@[args, locals], world], insns) {
    case insns of
      stmt:tail ->
      --fprintf(stderr, "%s %s %s\n", stmt.string, stack.string, state.string); 
      case stmt of
        READ -> case readWorld (world) of
          [n, newWorld] -> eval([n:stack, callStack, state, newWorld], tail)
        esac
      | WRITE -> case stack of
          n:bottom -> eval([bottom, callStack, state, writeWorld(n, world)], tail)
        esac
      | BINOP (op) -> case stack of
          y:x:bottom -> eval([evalOp (op, x, y):bottom, callStack, state, world], tail)
        esac
      | LD (v) -> eval([lookup(state, v):stack, callStack, state, world], tail)
      | ST (v) -> case stack of
          x:bottom -> eval([stack, callStack, assign (state, v, x), world], tail)
        esac
      | CONST (x) -> eval ([x:stack, callStack, state, world], tail)
      | LABEL (l) -> eval (c, tail)
      | JMP (l) -> eval (c, fromLabel (env, l))
      | CJMP (pred, l) -> case pred of
          "Z" -> case stack of 
              n:bottom -> eval ([bottom, callStack, state, world], if n == 0 then fromLabel (env, l) else tail fi)
            esac
        | "NZ" -> case stack of 
              n:bottom -> eval ([bottom, callStack, state, world], if n != 0 then fromLabel (env, l) else tail fi)
            esac
        esac
      | LDA (v) -> eval ([I (v) : stack, callStack, state, world], tail)
      | STI -> case stack of
          x : I (v) : bottom -> eval ([x : bottom, callStack, assign (state, v, x), world], tail)
        esac
      | DROP -> case stack of
          _ : bottom -> eval ([bottom, callStack, state, world], tail)
        | {} -> eval ([{}, callStack, state, world], tail)
        esac
      | DUP -> case stack of
          top : bottom -> eval ([top : top : bottom, callStack, state, world], tail)
        esac
      | CALL (fLabel, nArgs) -> eval ([stack, [state, tail] : callStack, state, world], fromLabel(env, fLabel))
      | GLOBAL (v) -> eval ([stack, callStack, assign (state, Glb (v), 0), world], tail)
      | END -> case callStack of
          {} -> c
        | [localState, tail] : outerCalls -> eval ([stack, outerCalls, localState, world], tail)
        esac
      | BEGIN (_, nArgs, nLocals) -> case createLocal (stack, nArgs, nLocals) of 
          [stack, newState] -> eval([stack, callStack, newState, world], tail)
        esac
      | x -> fprintf("fail: %s", x.string)
      esac
    | _ -> c
    esac
}
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> {LD (v)}
  | Const (x) -> {CONST (x)}
  | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, expr) {
    case expr of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Write (e)      ->
        case env.genLabel of [beforeWriteLab, env] ->
          case compile (beforeWriteLab, env, e) of [bwLabUsed, env, eCode] ->
            [false, env, eCode <+> label(beforeWriteLab, bwLabUsed) <+ WRITE]
          esac
        esac
    | Assn  (x, e)   ->
        case env.genLabels(2) of [lvEnd, rvEnd, env] ->
          case compile (lvEnd, env, x) of [lvEndUsed, env, lCode] ->
            case compile (rvEnd, env, e) of [rvEndUsed, env, rCode] ->
              [false, env, lCode <+> label(lvEnd, lvEndUsed) <+> rCode <+> label(rvEnd, rvEndUsed) <+ STI]
            esac
          esac
        esac
    | Binop (op, l, r) ->
        case env.genLabels(2) of [lvEnd, rvEnd, env] ->
          case compile (lvEnd, env, l) of [lvEndUsed, env, lCode] ->
            case compile (rvEnd, env, r) of [rvEndUsed, env, rCode] ->
              [false, env, lCode <+> label(lvEnd, lvEndUsed) <+> rCode <+> label(rvEnd, rvEndUsed) <+ BINOP (op)]
            esac
          esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, trueBranch, falseBranch) ->
        case env.genLabels(3) of [condEnd, trueEnd, falseBegin, env] -> 
          case compile (condEnd, env, cond) of [condEndUsed, env, condCode] ->
            case compile (trueEnd, env, trueBranch) of [trueEndUsed, env, trueBranchCode] -> 
                case compile (lab, env, falseBranch) of [falseBeginUsed, env, falseBranchCode] ->
                  [true, env, emptyBuffer ()
                    <+> condCode
                    <+> label (condEnd, condEndUsed)
                    <+ CJMP ("Z", falseBegin)
                    <+> trueBranchCode
                    <+> label (trueEnd, trueEndUsed)
                    <+ JMP (lab)
                    <+ LABEL (falseBegin)
                    <+> falseBranchCode
                  ]
                esac
            esac
          esac
        esac
    | While (cond, body) ->
        case env.genLabels(3) of [condEnd, whileBegin, bodyEnd, env] ->
          case compile (condEnd, env, cond) of [condEndUsed, env, condCode] ->
            case compile (bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
              [true, env, emptyBuffer ()
                <+ LABEL (whileBegin)
                <+> condCode
                <+> label (condEnd, condEndUsed)
                <+ CJMP ("Z", lab)
                <+> bodyCode
                <+> label (bodyEnd, bodyEndUsed)
                <+ JMP (whileBegin)
              ]
            esac
          esac
        esac
    | DoWhile (cond, body) ->
        case env.genLabels(3) of [condEnd, whileBegin, bodyEnd, env] ->
          case compile (condEnd, env, cond) of [condEndUsed, env, condCode] ->
            case compile (bodyEnd, env, body) of [bodyEndUsed, env, bodyCode] ->
              [false, env, emptyBuffer ()
                <+ LABEL (whileBegin)
                <+> bodyCode
                <+> label (bodyEnd, bodyEndUsed)
                <+> condCode
                <+> label (condEnd, condEndUsed)
                <+ CJMP ("NZ", whileBegin)
              ]
            esac
          esac
        esac
    | Ignore (expr) ->
        case env.genLabel of [ignoredEnd, env] ->
          case compile (ignoredEnd, env, expr) of [ignoredEndUsed, env, exprCode] ->
            [false, env, exprCode <+> label (ignoredEnd, ignoredEndUsed) <+ DROP]
          esac
        esac
    | Scope (defs, body) ->
        case env.genLabel of [scopeEnd, env0] ->
          var iter1 = foldl (fun ([env, code], d) {
            case d of
              Var (vs) -> [addVars(env, vs), if isGlobal(env) 
                then foldl(fun (code, v) { code <+ GLOBAL (v) }, code, vs)
                else code fi]
            | Fun (name, args, body) -> case genFunLabel (env, name) of
                  [fLabel, env] -> [addFun(env, name, fLabel, size(args)), code]
                esac
            esac
          }, [beginScope(env0), emptyBuffer()], defs);

          var env1 = iter1[0];
          var code = iter1[1];

          var env2 = foldl (fun (env, d) {
            case d of 
              Var (_) -> env
            | Fun (name, args, body) -> case genFunLabel(env, name) of
                  [label, env] -> rememberFun(env, label, args, body)
              esac
            esac
          }, env1, defs);
          
          case compile(scopeEnd, env2, body) of
            [scopeEndUsed, env3, exprCode] -> [scopeEndUsed, endScope(env3), code <+> exprCode <+> label (scopeEnd, scopeEndUsed)]
          esac
        esac
    | Call (f, args) ->
        case foldl (fun ([code, env], arg) {
          case env.genLabel of [argLabel, env] ->
            case compile (argLabel, env, arg) of [argLabelUsed, env, argCode] ->
              [code <+> argCode <+> label(argLabel, argLabelUsed), env]
            esac
          esac
        }, [emptyBuffer(), env], args) of [code, env] ->
          case lookupFun(env, f) of Fun (fLabel, nArgs) -> [false, env, code <+ CALL (fLabel, nArgs)] esac
        esac
    | x -> fprintf("fail: %s", x.string())
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
          [endLabUsed, env, code] -> 
            case getFuns(env) of [funs, env] ->
              getBuffer $ foldl(fun ([env, code], f) { 
                case f of Fun (fLabel, args, body, state) ->
                  case genLabel (addArgs (beginFun (env, state), args)) of [endLabel, env] ->
                    case compile (endLabel, env, body) of 
                      [endLabUsed, env, bodyCode] -> [env, code 
                        <+ LABEL (fLabel) 
                        <+ BEGIN (fLabel, size(args), getLocals(env))
                        <+> bodyCode
                        <+> label (endLabel, endLabUsed)
                        <+ END]
                    esac
                  esac
                esac
              }, [env, singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END], funs)[1]
            esac
       esac
  esac
}


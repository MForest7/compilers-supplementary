-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (v)   -> st(v)
  | Const (x) -> x
  | Binop (op, l, r) -> 
    var resL = evalExpr(st, l);
    var resR = evalExpr(st, r);
    case op of
      "+" -> resL + resR
    | "-" -> resL - resR
    | "*" -> resL * resR
    | "/" -> resL / resR
    | "%" -> resL % resR
    | "<" -> resL < resR
    | ">" -> resL > resR
    | "==" -> resL == resR
    | "!=" -> resL != resR
    | "<=" -> resL <= resR
    | ">=" -> resL >= resR
    | "&&" -> resL && resR
    | "!!" -> resL !! resR
    esac
  esac
}

-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({
        [Left, {[s ("!!"), binop]}],
        [Left, {[s ("&&"), binop]}],
        [Nona, {[s ("=="), binop], [s ("!="), binop], [s ("<="), binop], [s (">="), binop], [s ("<"), binop], [s (">"), binop]}],
        [Left, {[s ("+"), binop], [s ("-"), binop]}],
        [Left, {[s ("*"), binop], [s ("/"), binop], [s ("%"), binop]}]
      }, primary);

var primaryStmt = memo $ eta syntax (
    kSkip {Skip}
  | kRead v=inbr[s("("), lident, s(")")] {Read (v)}
  | kWrite e=inbr[s("("), exp, s(")")] {Write (e)}
  | v=lident s[":="] e=exp { Assn (v, e) }
);
   

public stmt = memo $ eta syntax (
  primaryStmt
  | head=primaryStmt s[";"] tail=stmt {Seq (head, tail)}
);
             
-- Public top-level parser
public parse = stmt;
